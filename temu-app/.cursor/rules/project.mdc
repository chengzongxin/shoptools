---
alwaysApply: true
---

# 开发规则

## 项目背景

我正在开发一个基于Expo技术栈的React Native应用。该项目采用MVVM架构模式，使用MobX进行状态管理，需要你协助我进行开发。


## 技术栈要求

- **框架**：Expo (React Native)
- **状态管理**：MobX
- **架构模式**：MVVM
- **路由**：Expo Router (app directory)

## 项目结构和UI组件使用规范

### 目录结构示例

```
worker-rn/
├── app/                          # Expo Router 页面路由
│   ├── _layout.tsx              # 根布局
│   ├── (tabs)/                  # 标签页分组
│   │   ├── _layout.tsx         # 标签页布局
│   │   ├── index.tsx           # 首页
│   │   └── mine.tsx            # 我的页面
│   ├── (login)/                 # 登录功能分组
│   │   ├── login.tsx           # 登录页面
│   │   ├── forgetPW.tsx        # 忘记密码
│   │   └── api.ts              # 登录相关API
│   ├── (order)/                 # 订单功能分组
│   │   ├── orderList.tsx       # 订单列表页面
│   │   ├── orderDetail.tsx     # 订单详情页面
│   │   ├── api.ts              # 订单相关API
│   │   └── stores/             # 订单相关Store
│   │       ├── orderListStore.ts
│   │       └── orderDetailStore.ts
│   └── +not-found.tsx          # 404页面
│
├── components/                  # 可复用UI组件库
│   ├── base/                   # 基础组件
│   │   ├── Button.tsx
│   │   ├── Input.tsx
│   │   └── Modal.tsx
│   ├── business/               # 业务组件
│   │   ├── OrderCard.tsx
│   │   └── UserProfile.tsx
│   ├── common/                 # 通用组件
│   │   ├── Loading.tsx
│   │   ├── EmptyState.tsx
│   │   └── ErrorBoundary.tsx
│   └── form/                   # 表单组件
│       ├── FormInput.tsx
│       └── FormButton.tsx
│
├── utils/                      # 工具函数
│   ├── request.ts             # 网络请求封装
│   ├── storage.ts             # 本地存储
│   └── constants.ts           # 常量定义
│
├── types/                      # TypeScript类型定义
│   ├── api.ts                 # API相关类型
│   ├── common.ts              # 通用类型
│   └── user.ts                # 用户相关类型
│
└── assets/                     # 静态资源
    ├── images/                # 图片资源
    ├── fonts/                 # 字体文件
    └── colors.ts              # 颜色定义
```

### 单页面文件组织方式

**方式一：与页面同级（简单功能）**
```
app/(login)/
├── login.tsx
├── loginStore.ts        # 单个Store文件
└── api.ts
```

**方式二：stores目录（复杂功能）**
```
app/(order)/
├── orderList.tsx
├── orderDetail.tsx
├── api.ts
└── stores/
    ├── orderListStore.ts
    ├── orderDetailStore.ts
    └── index.ts         # 统一导出（可选）
```

---

### 基本原则

- **页面路由**：页面组件放置在 `app/` 目录下，遵循 Expo Router 的文件系统路由规范。
- **页面内组件**：每个页面下如有专属组件，放在该页面模块的 `components/` 子目录下，例如 `app/xxx/components/`。
- **可复用组件**：通用的、可在多个页面间复用的组件统一放在项目根目录下的 `components/` 目录。
- **页面状态管理**：每个页面对应的 Store（如 `xxxStore.ts`）与页面文件放在同一目录下，例如 `app/xxx/xxxStore.ts`。
- **组件重用**：优先使用 `/components/` 目录下的现有 UI 组件作为基础构建块。
- **组件组合**：如无合适现有组件，可通过组合已有 UI 组件创建新组件。
- **缺失处理**：当缺少组件或设计时，需主动询问用户如何继续。

### 状态管理规范

- **Store位置**：Store 定义在与页面同一层级，或在功能模块下创建 `stores/` 目录
- **Store导出**：每个 Store 作为一个类导出
- **Store实例化**：Store 实例在组件内创建，不进行全局导出
- **响应式处理**：使用MobX 的 `makeAutoObservable` 进行响应式处理


## 代码规范

### Store设计模式

```tsx
// stores/xxxStore.ts
import { makeAutoObservable } from 'mobx';

export class XxxStore {
constructor() {
    makeAutoObservable(this);
}

// 数据属性
data = [];

// 计算属性
get computedData() {
    return this.data.filter(/* ... */);
}

// action方法
async fetchData() {
    // 数据获取逻辑
}
}
```

### 页面组件结构

```tsx
// app/xxx/page.tsx
import { observer } from 'mobx-react-lite';
import { XxxStore } from '@/stores/xxxStore';

const XxxPage = observer(() => {
const store = new XxxStore();

return (
    // JSX结构
);
});

export default XxxPage;
```

### 网络请求规范

> 通常在页面下有个 `api.ts` 文件，没有则创建，在这里定义接口，然后在 store 文件中调用

```tsx
import request from '@/utils/request';

// 获取xxx数据
export const getXXX = (param: string) => {
return request.post<T>("/app-api/xxx", { param });
};
```

---

## 开发要求

### 核心原则

1. **数据操作**：所有数据操作必须通过 Store 进行
2. **组件包装**：页面组件必须使用 `observer` 包裹
3. **Store实例化**：Store 实例在组件内创建，不全局共享
4. **目录结构**：保持目录结构清晰，遵循约定式路由
5. **类型安全**：合理使用 TypeScript 类型注解

### 输出要求

当我请求创建新功能时，请提供：

1. **完整的目录结构**
2. **相关文件的代码实现**
3. **必要的类型定义**
4. **状态管理逻辑**

### 开发流程

1. **需求分析**：分析需求，确定功能模块
2. **架构设计**：设计 Store 结构和数据流
3. **组件创建**：创建页面组件和子组件
4. **状态管理**：实现状态管理逻辑
5. **类型定义**：添加 TypeScript 类型定义和错误处理
6. **测试优化**：测试和优化代码

---

## 代码质量要求

- 使用函数式组件和 Hooks
- 遵循 React Native 最佳实践
- 保持代码简洁和可读性
- 添加必要的注释说明
- 确保组件具有良好的可复用性